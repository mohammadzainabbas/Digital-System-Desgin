module Floating_Point_Multiplication(a, b, ans, overflow);
input [31:0] a, b;
output overflow;
output [31:0] ans;

wire sign_a, sign_b, sign_ans;
wire unsigned [7:0] exp_a, exp_b, exp_ans;
wire [22:0] a_m, b_m, ans_m;
wire [45:0] temp; 
wire flag; //for ease in normalization -> if 1 then shift right and increment 1 in exp_ans

assign sign_a = a[31:31];
assign exp_a = a[30:23];
assign a_m = a[22:0];
 
assign sign_b = b[31:31];
assign exp_b = b[30:23];
assign b_m = b[22:0];

assign sign_ans = sign_a ^ sign_b;

assign {overflow, exp_ans} = exp_a + exp_b - 8'd127;

assign {flag, temp} = ({1,a_m}) * ({1,b_m});

//Overflow condition -> assign infinity
always@(*)
begin
if (overflow == 1)
begin
	exp_ans = 8'b11111111;
	ans_m = 0;
end
else
begin
	if (flag == 0)
	begin
		exp_ans = exp_a + exp_b - 8'd127;
		ans_m = temp[44:23];
	end
	else
	begin
		exp_ans = exp_a + exp_b - 8'b127 + 1;
		ans_m = temp[45:24];
	end
end
end

endmodule

module Simulation_Floating_Point_Multiplication;

	// Inputs
	reg [31:0] a;
	reg [31:0] b;

	// Outputs
	wire [31:0] ans;
	wire overflow;

	// Instantiate the Unit Under Test (UUT)
	Floating_Point_Multiplication uut (
		.a(a), 
		.b(b), 
		.ans(ans), 
		.overflow(overflow)
	);

	initial begin
		// Initialize Inputs
		a = 0;
		b = 0;

		// Wait 100 ns for global reset to finish
		#100
		a = {1'b0, 8'd128, 23'b01000000000000000000000};
		b = {1'b0, 8'd128, 23'b01000000000000000000000};

		#100
		a = {1'b1, 8'd128, 23'b01000000000000000000000};
		b = {1'b0, 8'd128, 23'b00000000000000000000000};

	end
			initial
		begin
		$monitor("Sign_A = %d, Exp_A = %d, Man_A = %b and Sign_B = %d, Exp_B = %d, Man_B = %b and Sign_Ans = %d, Exp_Ans = %d, Man_Ans = %b",a[31:31],a[30:23],a[22:0],b[31:31],b[30:23],b[22:0],ans[31:31],ans[30:23],ans[22:0]);
		end

      
endmodule


